//.h
#include "Application.h"
#include <vector>
#include "Pose.h"
#include "Clip.h"
#include "Skeleton.h"
#include "Mesh.h"
#include "Texture.h"
#include "Shader.h"
#include"Blending.h"


struct AnimationInstance {
	Pose mAnimatedPose;
	std::vector <mat4> mPosePalette;
	unsigned int mClip;
	float mPlayback;
	transform mModel;

	inline AnimationInstance() : mClip(0), mPlayback(0.0f) { }
};

class TestMain : public Application {
protected:
	Texture* mDiffuseTexture;
	Shader* mStaticShader;
	Shader* mSkinnedShader;
	std::vector<Mesh> mCPUMeshes;
	std::vector<Mesh> mGPUMeshes;
	Skeleton mSkeleton;
	std::vector<FastClip> mClips;

	AnimationInstance mGPUAnimInfo;
	AnimationInstance mCPUAnimInfo;
public:
	void Init() override;
	void Update(float deltaTime);
	void Render(float inAspectRatio);
	void Shutdown();
};

//.cpp
#include "TestMain.h"
#include "GLTFLoader.h"
#include "Uniform.h"
#include "glad.h"
#include "RearrangeBones.h"

void TestMain::Init() 
{
	cgltf_data* gltf = LoadGLTFFile("Assets/Woman.gltf");
	mSkeleton = LoadSkeleton(gltf);
	mCPUMeshes = LoadMeshes(gltf);
	mGPUMeshes = LoadMeshes(gltf);
	std::vector<Clip> clips = LoadAnimationClips(gltf);
	mClips.resize(clips.size());
	FreeGLTFFile(gltf);
	
	

	BoneMap bones = RearrangeSkeleton(mSkeleton);
	for (unsigned int i = 0, size = (unsigned int)mCPUMeshes.size(); i < size; ++i)
	{
		RearrangeMesh(mCPUMeshes[i], bones);
	}

	for (unsigned int i = 0, size = (unsigned int)mGPUMeshes.size(); i < size; ++i)
	{
		RearrangeMesh(mGPUMeshes[i], bones);
	}

	for (unsigned int i = 0, size = (unsigned int)clips.size(); i < size; ++i)
	{
		mClips[i] = OptimizeClip(clips[i]);
	}

	for (unsigned int i = 0, size = (unsigned int)mClips.size(); i < size; ++i) 
	{
		RearrangeFastclip(mClips[i], bones);
	}

	for (unsigned int i = 0, size = (unsigned int)mGPUMeshes.size(); i < size; ++i) 
	{
		mGPUMeshes[i].UpdateOpenGLBuffers();
	}

	mStaticShader = new Shader("Shaders/static.vert", "Shaders/lit.frag");
	mSkinnedShader = new Shader("Shaders/skinned.vert", "Shaders/lit.frag");
	mDiffuseTexture = new Texture("Assets/Woman.png");

	mGPUAnimInfo.mAnimatedPose = mSkeleton.GetRestPose();
	mGPUAnimInfo.mPosePalette.resize(mSkeleton.GetRestPose().Size());
	mCPUAnimInfo.mAnimatedPose = mSkeleton.GetRestPose();
	mCPUAnimInfo.mPosePalette.resize(mSkeleton.GetRestPose().Size());

	mGPUAnimInfo.mModel.translate = vec3(-2, 0, 0);
	mCPUAnimInfo.mModel.translate = vec3(2, 0, 0);

	unsigned int numUIClips = (unsigned int)mClips.size();
	for (unsigned int i = 0; i < numUIClips; ++i) {
		if (mClips[i].GetName() == "Walking") {
			mCPUAnimInfo.mClip = i;
		}
		else if (mClips[i].GetName() == "Running") {
			mGPUAnimInfo.mClip = i;
		}
	}
}

void TestMain::Update(float deltaTime) {
	mCPUAnimInfo.mPlayback = mClips[mCPUAnimInfo.mClip].Sample(mCPUAnimInfo.mAnimatedPose, mCPUAnimInfo.mPlayback + deltaTime);
	mGPUAnimInfo.mPlayback = mClips[mGPUAnimInfo.mClip].Sample(mGPUAnimInfo.mAnimatedPose, mGPUAnimInfo.mPlayback + deltaTime);

	mGPUAnimInfo.mAnimatedPose.GetMatrixPalette(mGPUAnimInfo.mPosePalette);
	mCPUAnimInfo.mAnimatedPose.GetMatrixPalette(mCPUAnimInfo.mPosePalette);
	
	for (unsigned int i = 0, size = (unsigned int)mCPUAnimInfo.mPosePalette.size(); i < size; ++i)
	{
		//计算蒙皮矩阵
		//Kj = (Bj->M)^(-1) * Cj->M
		mCPUAnimInfo.mPosePalette[i] = mSkeleton.GetInvBindPose()[i] * mCPUAnimInfo.mPosePalette[i];
		mGPUAnimInfo.mPosePalette[i] = mSkeleton.GetInvBindPose()[i] * mGPUAnimInfo.mPosePalette[i];
	}

	for (unsigned int i = 0, size = (unsigned int)mCPUMeshes.size(); i < size; ++i) 
	{
		mCPUMeshes[i].CPUSkinTrans(mCPUAnimInfo.mPosePalette);
	}
	//GenMatrixPalette(mSkeleton, mGPUAnimInfo.mAnimatedPose, mGPUAnimInfo.mPosePalette);


}

void TestMain::Render(float inAspectRatio) 
{
	mat4 projection = mat4::Perspective(60.0f, inAspectRatio, 0.01f, 1000.0f);
	mat4 view = LookAt(vec3(0, 5, 7), vec3(0, 3, 0), vec3(0, 1, 0));
	mat4 model;

	// CPU Skinned Mesh
	model = transformToMat4(mCPUAnimInfo.mModel);
	mStaticShader->Bind();
	Uniform<mat4>::Set(mStaticShader->GetUniform("model"), model);
	Uniform<mat4>::Set(mStaticShader->GetUniform("view"), view);
	Uniform<mat4>::Set(mStaticShader->GetUniform("projection"), projection);
	Uniform<vec3>::Set(mStaticShader->GetUniform("light"), vec3(1, 1, 1));

	mDiffuseTexture->Set(mStaticShader->GetUniform("tex0"), 0);
	for (unsigned int i = 0, size = (unsigned int)mCPUMeshes.size(); i < size; ++i) {
		mCPUMeshes[i].Bind(mStaticShader->GetAttribute("position"), mStaticShader->GetAttribute("normal"), mStaticShader->GetAttribute("texCoord"), -1, -1);
		mCPUMeshes[i].Draw();
		mCPUMeshes[i].UnBind(mStaticShader->GetAttribute("position"), mStaticShader->GetAttribute("normal"), mStaticShader->GetAttribute("texCoord"), -1, -1);
	}
	mDiffuseTexture->UnSet(0);
	mStaticShader->UnBind();

	// GPU Skinned Mesh
	model = transformToMat4(mGPUAnimInfo.mModel);
	mSkinnedShader->Bind();
	Uniform<mat4>::Set(mSkinnedShader->GetUniform("model"), model);
	Uniform<mat4>::Set(mSkinnedShader->GetUniform("view"), view);
	Uniform<mat4>::Set(mSkinnedShader->GetUniform("projection"), projection);
	Uniform<vec3>::Set(mSkinnedShader->GetUniform("light"), vec3(1, 1, 1));
	
	Uniform<mat4>::Set(mSkinnedShader->GetUniform("MatrixPalette"), mGPUAnimInfo.mPosePalette); 
	//Uniform<mat4>::Set(mSkinnedShader->GetUniform("pose"), mGPUAnimInfo.mPosePalette);
	//<mat4>::Set(mSkinnedShader->GetUniform("invBindPose"), mSkeleton.GetInvBindPose());

	mDiffuseTexture->Set(mSkinnedShader->GetUniform("tex0"), 0);
	for (unsigned int i = 0, size = (unsigned int)mGPUMeshes.size(); i < size; ++i) {
		mGPUMeshes[i].Bind(mSkinnedShader->GetAttribute("position"), mSkinnedShader->GetAttribute("normal"), mSkinnedShader->GetAttribute("texCoord"), mSkinnedShader->GetAttribute("weights"), mSkinnedShader->GetAttribute("joints"));
		mGPUMeshes[i].Draw();
		mGPUMeshes[i].UnBind(mSkinnedShader->GetAttribute("position"), mSkinnedShader->GetAttribute("normal"), mSkinnedShader->GetAttribute("texCoord"), mSkinnedShader->GetAttribute("weights"), mSkinnedShader->GetAttribute("joints"));
	}
	mDiffuseTexture->UnSet(0);
	mSkinnedShader->UnBind();
}

void TestMain::Shutdown() {
	delete mStaticShader;
	delete mDiffuseTexture;
	delete mSkinnedShader;
	mClips.clear();
	mCPUMeshes.clear();
	mGPUMeshes.clear();
}